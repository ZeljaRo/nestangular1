=== C:/Users/Korisnik/Documents/Projekti/nestangback i front ok/nestangular/back/src/maints ===
import { NestFactory } from '@nestjs/core';
import { AppModule } from './modules/app.module';
import { Client } from 'pg'; // PostgreSQL konekcija izvan TypeORM-a

async function testPgConnection() {
  const client = new Client({
    host: 'localhost',
    port: 5433,
    user: 'nest_user',
    password: 'lozinka123',
    database: 'mydb',
  });

  try {
    await client.connect();
    console.log('âś… PostgreSQL konekcija uspjeĹˇna!');
  } catch (err) {
    console.error('âťŚ PostgreSQL konekcija neuspjeĹˇna:', err.message);
  } finally {
    await client.end();
  }
}

async function bootstrap() {
  await testPgConnection(); // PokreÄ‡emo test prije aplikacije

  const app = await NestFactory.create(AppModule);

  app.enableCors({
    origin: 'http://localhost:4200', // Dozvoljavamo frontend pristup
    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
    credentials: true,
  });

  await app.listen(3005);
}
bootstrap();



=== C:/Users/Korisnik/Documents/Projekti/nestangback i front ok/nestangular/back/src/auth/authcontrollerspects ===
import { Test, TestingModule } from '@nestjs/testing';
import { AuthController } from './auth.controller';

describe('AuthController', () => {
  let controller: AuthController;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [AuthController],
    }).compile();

    controller = module.get<AuthController>(AuthController);
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });
});



=== C:/Users/Korisnik/Documents/Projekti/nestangback i front ok/nestangular/back/src/auth/authcontrollerts ===
import { Controller, Post, Body, Get, Request, UseGuards } from '@nestjs/common';
import { AuthService } from './auth.service';
import { JwtAuthGuard } from './jwt-auth.guard';

@Controller('auth')
export class AuthController {
  constructor(private readonly authService: AuthService) {}

  @Post('register')
  async register(@Body() userData: { username: string; password: string }) {
    return this.authService.register(userData);
  }

  @Post('login')
  async login(@Body() userData: { username: string; password: string }) {
    return this.authService.login(userData);
  }

  @UseGuards(JwtAuthGuard)
  @Get('profile')
  async getProfile(@Request() req) {
    return { message: 'Access granted!', user: req.user };
  }
}



=== C:/Users/Korisnik/Documents/Projekti/nestangback i front ok/nestangular/back/src/auth/authmodulets ===
import { Module } from '@nestjs/common';
import { AuthService } from './auth.service';
import { AuthController } from './auth.controller';
import { JwtModule } from '@nestjs/jwt';
import { PassportModule } from '@nestjs/passport';
import { JwtStrategy } from './jwt.strategy';
import { User } from '../entities/user.entity';
import { TypeOrmModule } from '@nestjs/typeorm';

@Module({
  imports: [
    TypeOrmModule.forFeature([User]),
    PassportModule,
    JwtModule.register({
      secret: 'tajna_kljuc',
      signOptions: { expiresIn: '1h' },
    }),
  ],
  controllers: [AuthController],
  providers: [AuthService, JwtStrategy], // Dodaj JwtStrategy
  exports: [AuthService, JwtModule], // Dodaj JwtModule u exports
})
export class AuthModule {}



=== C:/Users/Korisnik/Documents/Projekti/nestangback i front ok/nestangular/back/src/auth/authservicespects ===
import { Test, TestingModule } from '@nestjs/testing';
import { AuthService } from './auth.service';

describe('AuthService', () => {
  let service: AuthService;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [AuthService],
    }).compile();

    service = module.get<AuthService>(AuthService);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });
});



=== C:/Users/Korisnik/Documents/Projekti/nestangback i front ok/nestangular/back/src/auth/authservicets ===
import { Injectable, UnauthorizedException, InternalServerErrorException } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import * as bcrypt from 'bcryptjs';
import { UsersService } from '../services/user/user.service';

@Injectable()
export class AuthService {
  constructor(
    private readonly usersService: UsersService,
    private readonly jwtService: JwtService,
  ) {}

  async validateUser(email: string, password: string): Promise<any> {
    const user = await this.usersService.findByEmail(email);
    if (user && (await bcrypt.compare(password, user.password))) {
      const { password, ...result } = user;
      return result;
    }
    return null;
  }

  async login(user: any) {
    const validUser = await this.validateUser(user.email, user.password);
    if (!validUser) {
      throw new UnauthorizedException('Invalid credentials');
    }

    const payload = { username: validUser.email, sub: validUser.id };
    return {
      access_token: this.jwtService.sign(payload),
    };
  }

  async register(userData: any) {
    try {
      const hashedPassword = await bcrypt.hash(userData.password, 10);

      console.log('âś”ď¸Ź Registracija korisnika:', {
        email: userData.email,
        korisnickoIme: userData.username,
      });

      const createdUser = await this.usersService.create({
        ...userData,
        password: hashedPassword,
      });

      const { password, ...result } = createdUser;

      return {
        message: 'User registered successfully',
        user: result,
      };
    } catch (error) {
      console.error('âťŚ GreĹˇka u register metodi:', error);
      throw new InternalServerErrorException('Registration failed');
    }
  }
}



=== C:/Users/Korisnik/Documents/Projekti/nestangback i front ok/nestangular/back/src/auth/jwt-authguardts ===
import { Injectable, CanActivate, ExecutionContext, UnauthorizedException, Inject } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';

@Injectable()
export class JwtAuthGuard implements CanActivate {
  constructor(@Inject(JwtService) private jwtService: JwtService) {}

  canActivate(context: ExecutionContext): boolean {
    const request = context.switchToHttp().getRequest();
    const authHeader = request.headers.authorization;

    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      throw new UnauthorizedException('Missing or invalid token');
    }

    const token = authHeader.split(' ')[1];
    try {
      const decoded = this.jwtService.verify(token);
      request.user = decoded;
      return true;
    } catch (error) {
      throw new UnauthorizedException('Invalid token');
    }
  }
}



=== C:/Users/Korisnik/Documents/Projekti/nestangback i front ok/nestangular/back/src/auth/jwtstrategyts ===
import { Injectable } from '@nestjs/common';
import { PassportStrategy } from '@nestjs/passport';
import { ExtractJwt, Strategy } from 'passport-jwt';

@Injectable()
export class JwtStrategy extends PassportStrategy(Strategy) {
  constructor() {
    super({
      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
      ignoreExpiration: false,
      secretOrKey: 'tajna_kljuc', // âš ď¸Ź U produkciji koristi ENV varijablu!
    });
  }

  async validate(payload: any) {
    return { userId: payload.sub, email: payload.email };
  }
}



=== C:/Users/Korisnik/Documents/Projekti/nestangback i front ok/nestangular/back/src/config/databaseconfigts ===
import { TypeOrmModuleOptions } from '@nestjs/typeorm';
import { User } from '../entities/user.entity';

export const databaseConfig: TypeOrmModuleOptions = {
  type: 'postgres',
  host: 'localhost',
  port: 5433,
  username: 'nest_user',
  password: 'lozinka123',
  database: 'mydb',
  entities: [User],
  synchronize: true,
};



=== C:/Users/Korisnik/Documents/Projekti/nestangback i front ok/nestangular/back/src/controllers/appcontrollerspects ===
import { Test, TestingModule } from '@nestjs/testing';
import { AppController } from './app.controller';
import { AppService } from './app.service';

describe('AppController', () => {
  let appController: AppController;

  beforeEach(async () => {
    const app: TestingModule = await Test.createTestingModule({
      controllers: [AppController],
      providers: [AppService],
    }).compile();

    appController = app.get<AppController>(AppController);
  });

  describe('root', () => {
    it('should return "Hello World!"', () => {
      expect(appController.getHello()).toBe('Hello World!');
    });
  });
});



=== C:/Users/Korisnik/Documents/Projekti/nestangback i front ok/nestangular/back/src/controllers/appcontrollerts ===
import { Controller, Get, UseGuards, Request } from '@nestjs/common';
import { AppService } from '../services/app.service';
import { JwtAuthGuard } from '../auth/jwt-auth.guard';

@Controller()
export class AppController {
  constructor(private readonly appService: AppService) {}

  @Get()
  getHello(): string {
    return this.appService.getHello();
  }

  @Get('profile')
  @UseGuards(JwtAuthGuard)
  getProfile(@Request() req) {
    return req.user;
  }
}



=== C:/Users/Korisnik/Documents/Projekti/nestangback i front ok/nestangular/back/src/entities/userentityts ===
import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';

@Entity()
export class User {
  @PrimaryGeneratedColumn()
  id: number;

  @Column({ unique: true })
  email: string;

  @Column()
  password: string;
}



=== C:/Users/Korisnik/Documents/Projekti/nestangback i front ok/nestangular/back/src/modules/appmodulets ===
import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { databaseConfig } from '../config/database.config';
import { AuthService } from '../auth/auth.service';
import { AuthController } from '../auth/auth.controller';
import { JwtModule } from '@nestjs/jwt';
import { UsersService } from '../services/user/user.service';

import { User } from '../entities/user.entity';

@Module({
  imports: [
    TypeOrmModule.forRoot(databaseConfig),
    TypeOrmModule.forFeature([User]),
    JwtModule.register({
      secret: 'secretKey',
      signOptions: { expiresIn: '1h' },
    }),
  ],
  controllers: [AuthController],
  providers: [AuthService, UsersService],
  exports: [AuthService, UsersService],
})
export class AppModule {}



=== C:/Users/Korisnik/Documents/Projekti/nestangback i front ok/nestangular/back/src/services/appservicets ===
import { Injectable } from '@nestjs/common';

@Injectable()
export class AppService {
  getHello(): string {
    return 'Hello World!';
  }
}



=== C:/Users/Korisnik/Documents/Projekti/nestangback i front ok/nestangular/back/src/services/user/userservicespects ===
import { Test, TestingModule } from '@nestjs/testing';
import { UserService } from './user.service';

describe('UserService', () => {
  let service: UserService;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [UserService],
    }).compile();

    service = module.get<UserService>(UserService);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });
});



=== C:/Users/Korisnik/Documents/Projekti/nestangback i front ok/nestangular/back/src/services/user/userservicets ===
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { User } from '../../entities/user.entity';


@Injectable()
export class UsersService {
  constructor(
    @InjectRepository(User)
    private usersRepository: Repository<User>,
  ) {}

  async create(userData: Partial<User>): Promise<User> {
    const user = this.usersRepository.create(userData);
    return this.usersRepository.save(user);
  }

  async findByEmail(email: string): Promise<User | null> {
    return this.usersRepository.findOne({ where: { email } });
  }

  async findById(id: number): Promise<User | null> {
    return this.usersRepository.findOne({ where: { id } });
  }
}



